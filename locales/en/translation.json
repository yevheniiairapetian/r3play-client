{
  "notificationCloseTitle":"Close",
    "whatsNewInfo":"What's new: the app moved to React.js, is now localized, and has a theme toggler. Read more ",
    "whatsNewLink":"here",
  "darkModalMessage":"Welcome to the dark side",
  "lightModalMessage":"Welcome to the side of light",
  "modalConfirm":"Let's go!",
"modalHint":"Click to close the modal",
  "app_title": "Yevhenii Airapetian - Portfolio",
    "languages": "Languages",
    "themeSwitcherLightHint":"Click here please to switch to the light theme",
    "themeSwitcherDarkHint":"Click here please to switch to the dark theme",
    "welcome text": "Hi, I'm Yevhenii!",
    "resume": "Resume",
    "introduction":"I'm a web developer passionate about technology",
    "experience":"With previous experience in teaching foreign languages and academic writing, I'm excited to pursue a career as a web developer.",
    "first focus":"I have always focused on delivering high-quality work that met deadlines, employing my refined problem-solving, time-management, and logical thinking skills.",
    "second focus":"My focus is to combine my expertise with my professional aspirations to help create functional, responsive, and accessible software solutions.",
    "availability":"I'm available for on-site and hybrid employment in the Berlin and Potsdam area or remotely.",
    "hobbies":"In addition to my passions in web development, I'm also an active hobby photographer and fitness enthusiast, and any other day you can find me outside taking photos or lifting heavy weights.",
    "code":"Code",
    "projects":"Projects",
    "projectsInfo":"Here you will find the current web development projects that I completed and worked on. All of them have hyperlinks to the codebase and the project cases, most have a link to the deployed version, and some also have additional links.",
    "projectsViewTip":"Use the slider controls to click through the projects list. Hover over a specific slide to access the project's links. Tap on a specific slide to view more information (on mobile)",
    "r3playInfo":"The front end of the R3play Web API that allows users to register and deregister, view information about movies, TV series, and anime, and manage their favorites list.",
    "r3playAPIInfo":"A Web API developed with Node.js, Express, and MongoDB, allowing users to register, deregister, view information about movies, TV series, and anime, and manage favorites.",
    "myFlixInfo":"A front-end part for the R3play Web API designed with Angular, Typescript, and Material UI allowing users to register, view information about movies, and add favorites.",
    "meetInfo":"A Progressive Web App written with AWS Lambda functions that employs OAuth2 authorization and authentication and displays events from CareerFoundry's Google Calendar API.",
    "owriteInfo":"A React Native application that allows users to chat. Users can set a username, choose the chat background color, and send text messages, pictures, and audio recordings.",
    "pokemonInfo":"A responsive Pokemon App fetching Pokemon with Ajax from an external Pokedex API and displaying their info such as Pokemon height, weight, ID, and front and back images",
    "toDoInfo":"A jQuery and Bootstrap to-do app that allows users to manage to-dos. Users can add, delete, and rearrange to-dos, create and delete to-do lists, and see a guide on how to use the app.",
    "portfolioInfo":"A responsive web-application developed with React, React Bootstrap and accessibility considerations, allowing users to view information about my projects, etc.",
    
    
    "r3playInfoTitle":"Click to read more about the R3play API",
    "r3playInfoTitleAPIDeployed":"Click to open the R3play API",
    "r3playInfoTitleGithub":"Click to open the R3play API Github repository",
    "myFlixInfoTitle":"Click to read more about the MyFlix App",
    "myFlixInfoTitleGithub":"Click to open the MyFlix App Github repository",
    "myFlixInfoTitleKanban":"Click to open the myFlix App project Kanban board",
    "meetInfoTitle":"Click to read more about the Meet App",
    "meetInfoTitleDeployed":"Click to open the Meet App",
    "meetInfoTitleGithub":"Click to open the Meet App Github repository",
    "owriteInfoTitle":"Click to read more about the Owrite App",
    "owriteInfoTitleGithub":"Click to open the Owrite App Github repository",
    "pokemonInfoTitle":"Click to read more about the Pokemon App",
    "pokemonInfoTitleDeployed":"Click to open the Pokemon App",
    "pokemonInfoTitleGithub":"Click to open the Pokemon App Github repository",
    "toDoInfoTitle":"Click to read more about the To Do List App",
    "toDoInfoTitleDeployed":"Click to open the To Do List App",
    "toDoInfoTitleGithub":"Click to open the To Do List App Github repository",
    "portfolioInfoTitle":"Click to read more about the Portfolio App",
    "portfolioInfoTitleDeployed":"Click to open the Portfolio App",
    "portfolioInfoTitleGithub":"Click to open the Portfolio App Github repository",
    "testimonialSliderMore":"Click to view the complete testimonial text",
    


    "projectsSliderMore":"More",
    "testimonials":"Word of Mouth",
    "wordOfMouth":"I would not be where I am today without all the wonderful people I've had the privilege to work with.",
    "testimonialsViewTip":"Use the slider controls to click through the testimonials list. Hover over the testimonials' headings to read more. Tap on a specific testimonial to view additional information (on mobile)",
    "testimonial1":"Maya Septriana, Career Consultant, CareerFoundry",
    "testimonial2":"Nizar Triki, Software Engineering Manager chez Expensya",
    "testimonial3":"Dejan Gogov, Web Developer, Wild Code School",
    "testimonial1Text":"Yevhenii is someone that is so easy to collaborate with. He always strives for excellence. Every time I give him feedback he would be willing to listen and adjust the submission...",
    "testimonial2Text":"I had the opportunity to mentor Yevhenii throughout his web development training at CareerFoundry. Yevhenii's self-sufficiency, rapid grasp of concepts...",
    "testimonial3Text":"During our 6-month Fullstack bootcamp, Yevhenii consistently showed a positive and friendly demeanor. He approached tasks with determination...",
    "testimonialsMore":"More",
    "contact":"Contact",
    "suggestion":"Want to work together or have a suggestion? I'm open to recruitment opportunities and comments",
    "eMailMe":"Feel free to email me using the form below",
    "contactFormHeader":"Contact",
    "firstName":"First Name",
    "firstNamePlaceholder":"Joey",
    "lastName":"Last Name",
    "lastNamePlaceholder":"Tribbiani",
    "phoneNumber":"Phone Number",
    "phoneNumberPlaceholder":"+49 1234 5678910",
    "eMail":"E-Mail",
    "eMailPlaceholder":"example@mail.com",
    "messageOrComment":"Message or Comment. Please be nice!",
    "messageOrCommentPlaceholder":"Your Message",
    "contactFormTip":"Fields marked with an asterisk are required",
    "contactFormPoweredBy":"Powered by",
    
    "caseWorkflow":"Workflow",
    "caseUpgrade":"Upgrade",
    "caseDatabase":"Database",
    "caseApi":"API",
    "caseInterface":"App Interface",
    "caseTDD":"Test-Driven Development",
    "caseServerAndApi":"Server-Side and API",
    "caseAgile":"Agile Workflow",
    "caseOverview":"Overview",
    "casePurpose":"Purpose and Context",
    "caseObjective":"Objective",
    "caseServer":"Server-Side",
    "caseClient":"Client-Side",
    "caseApproach":"Approach",
    "caseDuration":"Duration",
    "caseRetrospective":"Retrospective",
    "caseChallenges":"Challenges.",
    "caseConclusion":" Conclusion and Key Takeaways",
    "caseMainTakeaways":"Main takeaways for future projects",
    "apiPreview":"API Preview",
    "appPreview":"App Preview",
    "caseTechnologies":"Technologies used/Skills",
    "caseCredits":"Credits",
    "r3playCaseHeading":"R3play App Case Study",
    "r3playCaseIntroduction":"R3play is a web application, developed using the MERN stack, that provides users with information about movies, TV series, and anime. Users can access information about movies, directors, and genres. Users can create an account, update their information, and create a list of favorite movies, TV series, and anime.",
    "r3playCaseRequired":"R3play was a required project I developed as part of my full-stack immersion course at CareerFoundry to demonstrate my mastery of full-stack web development using JavaScript.",
    "r3playCaseAim":"The project aimed to develop a fully-functioning full-stack app that I could add to my professional portfolio. The problem I wanted to solve was to build the complete full-stack web application by connecting the previously designed server-side and the client-side for the application from scratch.",
    "r3playCaseAboutServer":"I developed a RESTful API using Node.js and Express, that interacts with a non-relational database (MongoDB). The API employs common HTTP methods like GET, PUT, POST, and DELETE. To retrieve data from and store data in the database, CRUD methods are used. The API provides movie, TV series, and anime information in JSON format.",
    "caseViewEndpoints":"View Endpoints",
    "r3playCasePostman":"I used Postman to test responses and requests to the API. I also made use of basic HTTP authentication and JWT authentication to provide for the authentication and authorization features.",
    "r3playCaseAboutClient":"After completing the API project, I proceeded to build the front-end interface users would need when interacting with the logic and data from the API and the database. It is a single-page, responsive web application, developed with React and React-Redux. It displays several interface views, including (but not limited to) a main view (shows a list of all movies, TV series, and anime), single movie, TV series, and anime views (shows data about a single movie, TV series, and anime, and allows users to add or delete them to or from their list of favorites), a login view, a registration view and a profile view (where users can update their user data and list of favorites).",
    "caseSliderTip":"Use the slider controls to click through the projects' list. Hover over the slides' headings to read more. Tap on a specific slide to view additional information (on mobile)",
    "r3playCaseDurationData":"12 weeks in total (backend: 7 weeks, frontend: 5 weeks)",
    "r3playCaseConclusionData":"The movie app was only the second full web application I developed in the Full-Stack web development course. When it was finished, I focused on enhancing my development skills, specifically the test-driven development approach. It requires implementing the testing phase before adding the actual functional logic, allowing for safer, bug-free, and quicker development.",
    





    "portfolioCaseHeading":"Portfolio App Case Study",
    "portfolioCaseIntroduction":"Portfolio App is a responsive web application, developed using React and React Bootstrap, that provides users with information about my current projects, testimonials, contact, and social platforms information, and is localized to several foreign languages. Users can access information in separate views,  translate the app to their preferred language, and switch the style to either a light or dark theme. ",
    "portfolioCaseRequired":"Portfolio App was a required project I developed as part of my \"Intro to web-development course\" at CareerFoundry to demonstrate my mastery of HTML, CSS, and website deployment. Additionally, I mastered such widespread web-development practices as app testing, CSS minimization, accessibility, supporting older browsers, and CSS animations.",
    "portfolioCaseAim":"The project aimed to develop and deploy a fully-functioning static website that I could use as my professional portfolio. The problem I wanted to solve was to employ the tools covered in the \"Intro to web-development course\" at CareerFoundry to build and deploy a working frontend that would be used as my professional portfolio.",
    "portfolioCaseAboutWorkflow":"In the early stages of the development process, I structured the content with HTML and then styled the pages with plain CSS. The Totally.js plugin helped to structure and style the website according to the recommended web-accessibility guidelines. These guidelines exist to help people with physical or other limitations to have a better user experience on the Internet. Special \"aria\" tags have been used for these purposes as well as informative descriptions and alternative text data. In the final stages of the project, I tested the website for proper work on various operating systems and browsers, including using fallback javascript for older Internet Explorer browser support.",
    "portfolioCaseAboutUpgrade1":"After the completion of my Career Foundry \"Full-Stack Web-Development Program\" and while studying at the CareerFoundry's \"Job Preparation course\", I decided to alter the app in various ways. First, the website got new pages with the projects' case data, where I described in detail how I worked on each project while studying at CareerFoundry. Second, I updated the styling to be more visually pleasing, functional, and aesthetic. However, since static websites become more and more outdated nowadays, it was time to migrate my Portfolio to one of the Javascript libraries widely used by the developer community. As, after completing several projects in the bootcamp with React.js, and being most experienced with it, I decided to use it as my project's skeleton.",
    "portfolioCaseAboutUpgrade2":"I initialized the work with a create react app command, then moved and re-wrote all HTML and CSS files to separate function components, and installed the necessary project dependencies. The projects, testimonials, and cases got their separate sliders with examples and video walk-throughs. Later on, I localized the app to several foreign languages, introduced a dark theme, and updated the app to save the user's language and theme preferences. And at last, I turned my Portfolio into a Progressive Web Application. With this feature, users can install the app on desktop and mobile devices, mimicking a native app experience like on Android or Windows platforms.",   
    "caseTotally":"Visit Totally.js Github repository",
    "portfolioCaseAboutClient":"I built the front-end interface to supply users with the possibility to interact with the data related to my professional portfolio. It was originally a static website, developed using plain HTML, CSS, and Totally.js, a Javascript plugin to test accessibility. It had separate HTML pages for the main, projects, contact, and other information.",
    "portfolioCaseDurationData":"2 weeks in total for the initial project. 3-6 months in sum for the current result",
    "portfolioCaseConclusionData":"The Portfolio website was the first project in the Career Foundry's web development bootcamp. When it was finished, I started the \"Full-Stack Immersion course\" with the work on the Pokemon App.",
    "portfolioCaseConclusionData2":"It was a great and rewarding experience to design and debug the app in its initial state up to the latest improvements it has. I also added new and built upon the old skills (including when working on my own), such as polishing the copy, debugging the deployment of React apps, using localization libraries, introducing and customizing theming, working with local storage, better styling practices, and others.",
    "portfolioCaseChallenge":"The development of the initial project was relatively easy and error-free since I already had experience in the technologies that were required for it. In fact, I managed to complete it 1 week before the required deadline and got my submissions showcased as an example for other students.",
    "portfolioCaseChallenge2":"However, as I moved to the more complex technologies and beyond the project's requirements on my own, I encountered several issues. One problem was that I couldn't completely introduce the dark theme to the app. When I switched the dark theme on, only a part of the app changed its style. Another one related to the difficulties of deployment and React settings required for it. Thankfully, the knowledge gained during the bootcamp aided me in solving these obstacles and I was able to:",
    "portfolioCaseChallengeDetail1":"Use my research and troubleshooting skills to fix the dark-theme-related issues",
    "portfolioCaseChallengeDetail2":"Research and troubleshoot the deployment-related issues",
    "portfolioMainTakeaway1":"Persistence is an important skill in web development, as well as the choice to compromise and set priorities",
    "portfolioMainTakeaway2":"Sometimes a bug may be caused unexpectedly and a solution needs a better attention to detail",
    "portfolioMainTakeaway3":"There's always space for improvement in your projects, so it's crucial to understand the moment when to move on further and/or prioritize",
    "portfolioMainTakeaway4":"Code (quickly) becomes outdated or needs an update, so checking in to your older projects from time to time is a good idea ",

    "portfolioSlide1Heading":"About View (Light theme)",
    "portfolioSlide2Heading":"About View (Dark theme)",
    "portfolioSlide3Heading":"Localized Project Case View",
    "portfolioSlide1Description":"The Portfolio App About view where users can read more about the author, access the codebase, and resumes (displayed in light theme)",
    "portfolioSlide2Description":"The Portfolio App About view where users can read more about the author, access the codebase, and resumes (displayed in dark theme)",
    "portfolioSlide3Description":"One of the projects' cases view that is localized (to the German language in this example)",
    


    "myFlixCaseHeading":"MyFlix App Case Study",
    "myFlixCaseIntroduction":"MyFlix-Angular-App is a web app, developed using the MEAN stack, that provides users with information about movies. Users can access information about movies, directors, and genres. Users can create an account, update their information, and create a list of favorite movies.",
    "myFlixCaseRequired":"MyFlix-Angular-App was a required project I developed as part of my full-stack immersion course at CareerFoundry to demonstrate my mastery of full-stack web development using JavaScript. Additionally, I practiced Agile project management, feedback providing, and documentation generation skills.",
    "myFlixCaseAboutServer":"I developed a RESTful API using Node.js and Express that interacts with a non-relational database (MongoDB). The API employs common HTTP methods like GET, PUT, POST, and DELETE. To retrieve data from and store data in the database, CRUD methods are used. The API provides movie, TV series, and anime information in JSON format.",
    "myFlixCasePostman":"I used Postman to test responses and requests to the API. I also made use of basic HTTP authentication and JWT authentication to provide for the authentication and authorization features.",
    "myFlixCaseAgileData":"The work on the project started with creating the Kanban board and filling it with the project requirements and user stories. When a project task was completed, it was moved to the \"Done\" section. As well, I generated detailed documentation with Typedoc as per the project's requirements.",
    "myFlixCaseAim":"The project aimed to develop a fully-functioning full-stack app that I could add to my professional portfolio. The problem I wanted to solve was to build the complete full-stack web application by connecting the previously designed server-side and the client-side for the application from scratch.",
    "myFlixCaseConclusion":"The myFlix app was the last full web application I developed in the Full-Stack web development course. When it was finished, I proceeded to enhance my portfolio.",
    "myFlixCaseAboutClient":"I built the front-end interface for users to be able to interact with the logic and data from the API and the database. It is a single-page, responsive web application, developed with Angular and Material UI. It displays several interface views, including a main view (shows a list of all movies, a button to manage favorites, and buttons to view additional movie information), a login/signup view, and a profile view (where users can update their user data).",
    "myFlixCaseConclusionData":"The myFlix app was the last full web application I developed in the Full-Stack web development course. When it was finished, I proceeded to enhance my portfolio.",
    "myFlixCaseConclusionData2":"The difficulties I encountered happened at the end of the project and related more to the peculiarities of Angular and Github. One issue occurred when Github pages refused to deploy the app for a long time. The other one happened when the local changes to the codebase didn't display in the deployed app. To troubleshoot this, I reached out to my mentor and tutor and, during a pair programming session, we managed to fix the problems.",
    "myFlixCaseConclusionData3":"It was also a useful experience in debugging and troubleshooting, using git terminal commands, specifics of working with Angular, and pair programming sessions. I also added new skills to my arsenal, such as Typescript, Angular, Material UI, proper code commenting, collaboration, and others.",
    "myFlixCaseDurationData":"Almost 1.5 weeks (10 days)",
    "myFlixCaseChallenge":"The development of the myFlix app took much less time and effort as compared to the R3play React app since:",
    "myFlixCaseChallengeDetail1":"The API has already been built",
    "myFlixCaseChallengeDetail2":"The extensive practice with React helped to progress faster",
    "myFlixCaseChallengeDetail3":"I didn't add many additional features and stick to the basic course requirements",
    "myFlixCaseChallengeDetail4":"The time left in the program was already limited",    
    "myFlixMainTakeaway1":"Improve the app's functionality to reflect the R3play app's features",
    "myFlixMainTakeaway2":"Research more about Typescript",
    "myFlixMainTakeaway3":"Read more about Material UI",
    "myFlixMainTakeaway4":"Continue exploring other technologies and best practices in web development",
    


    "meetCaseHeading":"Meet App Case Study",
    "meetCaseIntroduction":"Meet App is a responsive Progressive Web Application, developed using the test-driven development approach using the AWS Serverless Lambda functions, OAuth2 Google authentication and authorization screen, and the Recharts library to allow users to view the Google Calendar API events. Users can authenticate with Google, specify the city and number of events to display the events, and read more about them. The app can be installed on desktop/mobile thanks to the PWA recommendations, used both online and offline, and shows notifications when incorrect data is entered and/or the internet connection is lost.",
    "meetCaseRequired":"Meet App was a required project I developed as part of my full-stack immersion course at CareerFoundry to demonstrate my mastery of test-driven full-stack web development skills using JavaScript and serverless technologies.",
    "meetCaseAboutTDD":"I developed the application by first writing the user stories. With the help of the test-driven development approach, I incorporated the unit, integration, user acceptance, and end-to-end testing methods to write the required tests before implementing the code.",
    "meetCaseAboutServerAndApi":"I developed the server side using the AWS serverless Lambda functions as the requirement for the project. The use of serverless allows for the reduction of extra work for managing a server and makes scalability easier. For the app's events data, CareerFoundry's Google Calendar was used. The Google OAuth2 authentication screen was set up to authenticate and authorize users to the app. In the final stages of development, I made use of React's service worker to transform the app into a Progressive Web Application. The Recharts library allows the visualization of event data in the form of two types of charts (Scatter and Pie).",
    "meetCaseAim":"The project aimed to develop a fully-functioning full-stack app that I could add to my professional portfolio. The problem I wanted to solve was to build a complete full-stack web application by employing the test-driven development approach using the AWS serverless Lambda functions, React.js, and the Progressive Web App requirements.",
    "meetCaseAboutClient":"For the visual part, the frontend was responsively styled with regular CSS and JSX.",
    "meetCaseConclusionData":"The Meet app was one of the last projects in the Full-Stack web development course. When it was finished, I focused on enhancing my React development skills, specifically by diving into a new topic - Native app development with React Native and Android Studio.",
    "meetCaseDurationData":"Almost 1 month (28 days)",
    "meetCaseChallenge1":"The biggest challenge for me in this project was the test-driven development approach itself. Having written code in the behavior-driven style before, I had to spend some time getting used to the new method. However, the work on the app went quite well and I got used to the new topic quickly. One of the issues while working on the project was the users' inability to authenticate to the app. After reaching out to my tutor, I solved the problem by adding manually the test users through the Google Developer console.",
    "meetCaseChallenge2":"After troubleshooting the app's installation on a smartphone, I successfully turned it into a Progressive Web App. I also enjoyed working with the user notifications and the Recharts library. I also improved my knowledge and skills of the TDD approach and setting up the AWS and Google Developer accounts, as well as confirming the domain's ownership.",    
    "meetMainTakeaway1":"Practice the TDD approach on side projects",
    "meetMainTakeaway2":"Discover more about data visualization",
    

    "owriteCaseHeading":"Owrite App Case Study",
    "owriteCaseIntroduction":"OWrite is a React Native real-time chat application, developed using React Native, Expo CLI, accessibility guidelines, and Android Studio for the app itself, and Google Firebase and Firestore for the database. It provides users with real-time chatting features, including viewing message history thanks to the AsyncStorage, sending messages, photos, audio recordings, and geolocation data. Users can set their username and choose the app's background color.",
    "owriteCaseRequired":"OWrite was a required project I developed as part of my full-stack immersion course at CareerFoundry to demonstrate my mastery of native app development using React Native, Expo CLI, Android Studio, and Google Firebase/Firestore.",
    "owriteCaseAim":"The project aimed to develop a fully-functioning native app that I could add to my professional portfolio. The problem I wanted to solve was to build the complete native application by connecting the Google Firebase/Firestore database to the app's interface designed with React Native.",
    "owriteCaseAboutDatabase":"I developed the database using Google Firebase to store two users required for testing. Later on, I employed Google Firestore to contain the users' chat data.",
    "owriteCaseAboutInterface":"For the interface, Android Studio and Expo Go Android App were incorporated for testing purposes. React Native was used to design two app screens: a welcome and a chat screen. The welcome screen was designed with accessible elements as per React Native recommendations, allows to set a username and choose a background color for the chat screen. The chat screen displays the user's name, message history, a text field, and a menu with additional file options. To develop the required features, I incorporated such libraries as Gifted Chat, Expo Media, Expo Image Picker, Stack Navigation, and others. To allow for an offline use, AsyncStorage was used.",
    "owriteCaseAboutServer":"Creating the server logic started with setting up an account at Google Firebase and configuring it. I proceeded then to add the Google Firebase configuration settings to the codebase.",
    "owriteCaseConclusionData":"The OWrite app was the penultimate project I worked on in the Full-Stack web development course. When it was finished, I focused on further enhancing my development skills, specifically adding another front-end framework and design system to my skillset, Angular and Material UI respectively. The next project required recreating the front end for the R3play API with Angular and Material UI this time.",
    "owriteCaseDurationData":"1 week",
    "owriteCaseChallenge1":"The challenges that I faced during this project were more related to the course timeline itself than the actual work on the codebase. As mentioned earlier, since I dedicated extra effort to improving the R3play API and App, it left less time for the end of the Immersion course. As a result, I had to plan my schedule to finish the project on time and concentrate only on the required and recommended features.",
    "owriteCaseChallenge2":"I particularly enjoyed developing the app because I've always wanted to dive into native app development, and React Native was on my checklist. Additionally, it was pleasing to know that the previously gained skills (time management and prioritization) helped me to complete the project very quickly and add new native development skills to my toolbox.",    
    "owriteMainTakeaway1":"Practice creating real-time applications on side projects",
    "owriteMainTakeaway2":"Discover more about Native app development",
  

    "pokedexLink":"Pokedex API",
    "pokemonCaseHeading":"Pokemon App Case Study",
    "pokemonCaseIntroduction":"Pokemon App is a web application, developed using HTML, CSS, Javascript, and Bootstrap. It provides users with information about Pokemon fetched from the Pokedex API. Users can access information about Pokemon ID, height, and weight, see a Pokemon's front and back image, and search for a Pokemon by name.",
    "pokemonCaseRequired":"Pokemon App was a required project I developed as part of my full-stack immersion course at CareerFoundry to demonstrate my mastery of web development using JavaScript and Bootstrap.",
    "pokemonCaseAim":"The project aimed to develop a fully-functioning app that I could add to my professional portfolio. The problem I wanted to solve was to build and style a web application by employing an external API and a popular CSS framework.",
    "pokemonCaseAboutApi":"I used the Pokedex API as part of the project's required dependencies to supply the app with various information about Pokemon. For this purpose, Javascript promises were used to handle asynchronous requests and responses to/from the Pokedex API.",
    "pokemonCaseAboutClient":"After finishing the logic part of the app, I began the stylization phase by incorporating Bootstrap as the project's required CSS framework. The task was to use Bootstrap's grid, classes, and components to implement the required functionality and responsiveness. Finally, I tested the app on various screens, devices, and operating systems using the device/system emulators.",
    "pokemonCaseConclusionData":"The Pokemon app was the first Full-Stack Immersion course project. When it was finished, I focused on enhancing my development skills, specifically diving into Node.js, Express, and APIs. Designing my own API was a useful and important step to further mastering the crucial back-end web development skills.",
    "pokemonCaseDurationData":"4 weeks",
    "pokemonCaseChallenge1":"The part requiring to use asynchronous Javascript was the most time-consuming, while the work on styling was relatively easy. Overall, it took me 1 month to complete the project which was around the average time spent. First, I had difficulties displaying the specific Pokemon information as described in the Pokedex documentation. Also, I had to troubleshoot the issue when data didn't display on the front end.",
    "pokemonCaseChallenge2":"Nevertheless, this was a fun and relatively easy project to work on. I have enjoyed diving into the basics of Javascript by learning AJAX. It was also motivating to learn styling with the help of Bootstrap. I also quickly gained useful skills in working with Javascript promises and APIs, reading documentation, styling with CSS frameworks, and troubleshooting. Thankfully, my mentor and tutor assisted me during the project and I was able to apply the gained skills later on when implementing additional features to the app.",    
    "pokemonMainTakeaway1":"Improve debugging skills by practicing and using external educational resources.",
    "pokemonMainTakeaway2":"Stay motivated even when temporary educational difficulties occur.",
    "pokemonMainTakeaway3":"Improve digital self-care regarding rest time",
    



    "toDoCaseHeading":"To Do App Case Study",
    "toDoCaseIntroduction":"To-Do-List App is a responsive web application, developed using HTML, Bootstrap, and Javascript and provides users with the ability to manage their to-dos. Users can add and delete their to-dos among other features.",
    "toDoCaseRequired":"To-Do-List App was a required side mini-project I developed as part of my full-stack immersion course at CareerFoundry to demonstrate my mastery of working with jQuery.",
    "toDoCaseAim":"The project aimed to design a fully-functioning web app that I could add to my professional portfolio. The problem I wanted to solve was to turn plain Javascript into jQuery.",
    "toDoCaseAboutClient":"After receiving the initial plain Javascript code with basic app functionality, I started turning it into a jQuery one. This type of work allowed me to introduce additional features and styles.",
    "toDoCaseConclusionData":"The To-Do-List App was only a side mini-project I did in the full-stack immersion course but I enjoyed adding new features and styling to it above the basic requirements. It quickly enhanced my skills in jQuery, Bootstrap, debugging, and working with additional libraries.",
    "toDoCaseDurationData":"1 day for required functionality and around 3 weeks for additional features",
    "toDoCaseChallenge1":"The development of the app's basic features didn't create any difficulties and I finished the task within 1 day. However, I wasn't satisfied with the functionality it had and decided to find extra time to add improvements. These additions caused a lot of debugging because different jQuery libraries didn't function well together and as I planned them to. Thankfully, my mentor and tutor helped me to troubleshoot the work. Before introducing extra functions, the app could:",
    "toDoCaseChallenge2":"With the new features, it allows to:",    
    "toDoMainTakeaway1":"Enhance the Bootstrap skills",
    "toDoMainTakeaway2":"Work on the debugging skills",
    "toDoMainTakeaway3":"Extend the app's features later on",
    "toDoBeforeFeature1":"Add/delete to-dos",
    "toDoBeforeFeature2":"Rearrange to-dos on desktop",
    "toDoBeforeFeature3":"Cross-out to-dos",
    "toDoBeforeFeature4":"Show built-in browser alert notifications",
    "toDoAfterFeature1":"Add/delete to-do lists",
    "toDoAfterFeature2":"Add/delete to-dos to/from the to-do lists (including pressing \"Enter\" on the keyboard)",
    "toDoAfterFeature3":"Clear the input field",
    "toDoAfterFeature4":"Rearrange and cross-out to-dos on mobile with the help of jQuery Mobile and jQuery Touch Punch",
    "toDoAfterFeature5":"Show prettier notifications with the help of Bootstrap and jQuery UI",
    "toDoAfterFeature6":"View a guide on how to use the app on different platforms with the help of Bootstrap",


    "notFound":"We couldn't find the resource you were looking for.",
    "returnHomeParagraph":"But you can always return to the ",
    "returnHomeLink":"home page",
    
    "copySkill":"Polishing the copy",
    "terminalSkill":"Work in the terminal",
    "accessibilitySkill":"Accessibility",
    "externalApiSkill":"External API",
    "nativeSkill":"Native App Development",
    "troubleshootingSkill":"Troubleshooting",
    "TDDSkill":"Test-driven development",
    "kanbanSkill":"Kanban board",
    "agileSkill":"Agile workflow",
    "documentationSkill":"Documentation",
    "userStoriesSkill":"User stories",
    "collabSkill":"Collaboration",
    "feedbackSkill":"Providing feedback",
    "contributeSkill":"Contributing",
    "testingSkill":"Testing",
    "apiSkill":"Google Calendar API",
    "pwsSkill":"Progressive Web Apps",
    "responsiveSkill":"Responsive design",
    "deploySkill":"Deploying a website",
    "caseLead":"Role: Lead Developer",
    "caseTutor":"Tonny Ntambaazi:",
    "caseTutor2":"Creative Director",
    "caseMentor":"Nizar Triki:",
    "caseMentor2":"Software Engineering Manager",
    "r3playMainTakeaway1":"Focus on the required functionality first",
    "r3playMainTakeaway2":"Enhance the time-management skills",
    "r3playMainTakeaway3":"Deepen the knowledge of the used technologies by reading and practicing more",
    "r3playMainTakeaway4":"Not doubting to reach out for help in case of technical issues",
    "r3playCaseChallenge1":"The development of the backend side was the most time-consuming, while the work on the client side was the most challenging technically. As a result, it took me longer to complete the full stack as compared to the usual duration of two CareerFoundry achievements. The reason for this was that I concentrated on the functional and visual improvements of both achievements above the basic requirements, and needed more time to troubleshoot the conditional rendering of JSX elements, how to implement Redux in React, and the conditional logic behind rendering the movie suggestions to the user.",
    "r3playCaseChallenge2":"Nevertheless, this was my favorite project. I have enjoyed developing the user interface and working with database information. I also quickly enhanced my terminal skills, understanding of querying the MongoDB NoSQL database, conditional rendering, filtering data, customization of React Bootstrap components, as well as time-management and prioritization skills. Thankfully, my skilled tutor and mentor assisted me during the project and I was able to apply the gained skills later on when implementing additional features to the app.",
    
    
    
    
    "r3playSlide1Heading":"Login View",
    "r3playSlide2Heading":"Movie View",
    "r3playSlide3Heading":"Profile View",
    "r3playSlide1Description":"The R3play App login view where users can log in to the app",
    "r3playSlide2Description":"The R3play App movie view that displays a list of movies available in the app",
    "r3playSlide3Description":"The R3play App profile view where users can alter their account information",
    
    "myFlixSlide1Heading":"Login View",
    "myFlixSlide2Heading":"Movie View",
    "myFlixSlide3Heading":"Profile View",
    "myFlixSlide1Description":"The MyFlix App login view where users can log in to the app",
    "myFlixSlide2Description":"The MyFlix App movie view that displays a list of movies available in the app",
    "myFlixSlide3Description":"The MyFlix App profile view where users can alter their account information",
    

    "meetSlide1Heading":"General interface",
    "meetSlide2Heading":"Errors and Warnings",
    "meetSlide3Heading":"Event details",
    "meetSlide1Description":"The Meet App events loaded in the app with the form fields allowing to adjust the results",
    "meetSlide2Description":" The Meet App events screen demonstrated with warnings and errors due to the incorrect data entered",
    "meetSlide3Description":"The Meet App events screen with an events card expanded",


    "owriteSlide1Heading":"Welcome Screen",
    "owriteSlide2Heading":"Chat Screen",
    "owriteSlide1Description":"The Owrite App Welcome screen where users can pick a theme and enter the chat room",
    "owriteSlide2Description":"The Owrite App Chat screen where users can chat, including sending audio and image files",
    

    "pokemonSlide1Heading":"Welcome Message",
    "pokemonSlide2Heading":"Pokemon Results",
    "pokemonSlide3Heading":"Pokemon Card",
    "pokemonSlide1Description":"The Pokemon App main page with a welcome message",
    "pokemonSlide2Description":"The Pokemon App filtered Pokemon results displayed as a list",
    "pokemonSlide3Description":"The Pokemon card with data that the user can see upon clicking on a Pokemon name",


    "toDoSlide1Heading":"Initial View",
    "toDoSlide2Heading":"New List",
    "toDoSlide3Heading":"Notification",
    "toDoSlide1Description":"The To Do App initial view where users view tips on how to use the app and add a first list",
    "toDoSlide2Description":"A new list of to-dos have been added",
    "toDoSlide3Description":"When the user leaves the input fieled blank and tries to add a new task, an notification message appears",


    "cookieInfo1":"This app uses cookies and collects visitors' data. Read more about the ",
    "cookieInfo2" : "and",
    "cookieInfo3": " policies", 
    "cookieLink1": "Cookie",
    "cookieLink2": "Privacy",
    "cookieConfirm":"I agree",

    

    "menu":{
      
      "menuHome" : "Home"
        
      },
     "footer":{
        "copy":"© Yevhenii Airapetian, 2024. All rights reserved.",
        "impressumFooter":"Imprint",
        "toggleTitle":"Click to toggle the sidebar"
    },

    "notFoundImageAlt":"An image showing an old TV",
    "caseHeroAlt":"An image showing a screenshot from the project's case",
    "caseSliderAlt":"An image showing a screenshot from one of the application views",
    "logoAlt":"An image showing the application's logo",
    "contactImageAlt":"An image showing writing utensils and a person writing",
    "testimonialsSliderImageAlt":"An image showing a reviewer",
    "testimonialsImageAlt":"An image showing a team working",
    "projectsSliderImageAlt":"An image showing a screenshot made from a deployed app",
    "projectsImageAlt":"An image showing a workplace with a laptop and accessories",
    "aboutCvDeAlt":"An icon showing the German flag",
    "aboutCvEnAlt":"An icon showing the American flag",
    "aboutCvUkAlt":"An icon showing the Ukrainian flag",
    "aboutCvDeTitle":"Click here to download my resume in German. You might need to use a file viewer like Adobe Acrobat or similar",
    "aboutCvEnTitle":"Click here to download my resume in English. You might need to use a file viewer like Adobe Acrobat or similar",
    "aboutCvUkTitle":"Click here to download my resume in Ukrainian. You might need to use a file viewer like Adobe Acrobat or similar",
    "toggleResumeTitle":"Toggle resume files",
    "checkOutCodeTitle":"Check out code on Github",
    "profileImageAlt":"An image showing a man in a jacket"


  }
  